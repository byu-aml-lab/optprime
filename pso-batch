#!/usr/bin/env python
"""Run a PSO batch experiment.

To find out how to use this program, run it with the '-h' or '--help' option
""" 

#------------------------------------------------------------------------------

from __future__ import division
from optparse import OptionParser

from simulation import Simulation, functions, motions, neighborhoods
from cli import outputtypes, gen_simple_options, gen_varargs_options

import sys, os


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
def main():
    funcprefix = 'func'
    motionprefix = 'motion'
    neighborprefix = 'soc'
    simprefix = 'sim'

    versioninfo = '$Id$'

    parser = OptionParser()
    parser.add_option('-q', '--quiet',
            dest='quiet',
            action='store_true',
            help='Refrain from printing version and option information'
            )
    parser.add_option('-V', '--version',
            dest='version',
            action='store_true',
            help='Print version information and exit'
            )
    parser.add_option('-i', '--iterations',
            dest='iterations',
            default=100,
            type='int',
            help='Number of iterations to run'
            )
    parser.add_option('-e', '--evals',
            dest='useevals',
            default=False,
            action='store_true',
            help='Specify the number of function evaluations instead of batch iterations with the -i option',
            )
    parser.add_option('-o', '--outputfreq',
            dest='outputfreq',
            default=1,
            type='int',
            help='Number of iterations per value output',
            )
    parser.add_option('-t', '--outputtype',
            dest='outputtype',
            default='BasicOutput',
            help='Style of output {%s}' % ", ".join(outputtypes),
            )
    parser.add_option('-d', '--dimensions',
            dest='dimensions',
            default=2,
            type='int',
            help='Number of dimensions'
            )
    parser.add_option('-n','--num-particles',
            dest='numparts',
            default=2,
            type='int',
            help='Number of particles'
            )
    parser.add_option('-f','--function',
            dest='function',
            default='Sphere',
            help='Function to optimize {%s}' % ", ".join(functions)
            )
    parser.add_option('-b','--batches',
            dest='batches',
            type='int',
            default=1,
            help='Number of complete experiments to run'
            )
    parser.add_option('-v','--verbose',
            dest='verbose',
            action='store_true',
            default=False,
            help="Print out verbose error messages",
            )

    gen_simple_options( parser, simprefix, 'Simulation', Simulation.args )

    gen_varargs_options( parser, funcprefix, 'Function', functions )

    parser.add_option('-m','--motion',
            dest='motion',
            default='Basic',
            help='Particle motion type {%s}' % ", ".join(motions)
            )
    gen_varargs_options( parser, motionprefix, 'Motion', motions )

    parser.add_option('-s','--sociometry',
            dest='sociometry',
            default='Star',
            help='Particle sociometry {%s}' % ", ".join(neighborhoods)
            )
    gen_varargs_options( parser, neighborprefix, 'Sociometry', neighborhoods )

    options, args = parser.parse_args()

    if options.version:
        print "%s" % versioninfo
        sys.exit(0)

    #--------------------------------------------------------------------------
    # Create the simulation arguments, output header information
    #--------------------------------------------------------------------------

    if not options.quiet:
        print "# %s" % (versioninfo,)
        print "# ** OPTIONS **"
        for o in parser.option_list:
            if o.dest is not None:
                print "#     %s = %r" % (o.dest, getattr(options,o.dest))

    numparticles = options.numparts
    numiters = options.iterations
    numdims = options.dimensions

    # Format the 'extra' arguments for the simulation object -- removing
    # prefixes and such.
    simargs = {}
    for optname, opt in options.__dict__.iteritems():
        for prefix in (motionprefix, funcprefix, neighborprefix, simprefix):
            if optname.startswith( prefix + '_' ) and opt is not None:
                # Skip dimensions, since we pass that in explicitly
                suffix = optname[len(prefix)+1:]
                if suffix == 'dims': continue
                try:
                    simargs[suffix] = eval(getattr(options, optname))
                except SyntaxError:
                    simargs[suffix] = getattr(options, optname)

    #--------------------------------------------------------------------------
    # Perform the simulation in batches
    #--------------------------------------------------------------------------
    freq = options.outputfreq

    for batch in xrange(options.batches):
        sim = Simulation(
                options.dimensions,
                options.numparts,
                neighborhoods[options.sociometry],
                functions[options.function],
                motions[options.motion],

                **simargs
                )

        try:
            tmpfiles = sim.func.tmpfiles()
        except AttributeError:
            tmpfiles = []

        if options.useevals:
            simiter = sim.iterevals()
        else:
            simiter = sim.iterbatches()


        # Separate by two blank lines and a header
        print
        print
        if (options.batches > 1):
            print "# Batch %d" % batch

        # Note: some output types really need to get initialized just in time.
        outputter = outputtypes[options.outputtype]()

        # Perform the simulation
        try:
            for i in xrange(numiters):
                soc, iters = simiter.next()
                if 0 == (i+1) % freq:
                    outputter(soc, iters)
            print "# DONE" 
        except KeyboardInterrupt, e:
            print "# INTERRUPTED"
        except Exception, e:
            if options.verbose:
                raise
            else:
                print "# ERROR"

        for f in tmpfiles:
            os.unlink(f)
    #--------------------------------------------------------------------------

#------------------------------------------------------------------------------
if __name__ == '__main__': main()
#------------------------------------------------------------------------------
